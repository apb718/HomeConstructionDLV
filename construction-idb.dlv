% Constraint for something like limiting electricians to under 4
:- usableSchedule(Profession,foundation,Order,Days,People), People>2.



% Generates schedules through this, and the usable schedules generator
1={schedule(Profession,Job, Order, DaysNeeded)} :- construction_order(Job, Profession, Order),  
                                             profession_time(Job, ManDays, PerSqft), 
                                             squareFootage(Sqft), 
                                             DaysNeeded = (ManDays*Sqft)/PerSqft.

usableDays(Profession, Job, Order, 1) :- schedule(Profession,Job, Order, 0).
usableDays(Profession, Job, Order, DaysNeeded) :- schedule(Profession, Job, Order, DaysNeeded), DaysNeeded>0.

% Usable Schedule Gnerator
1={usableSchedule(Profession,Job, Order, Days, People) : days(Days), people(People), Days*People=DaysNeeded} :- usableDays(Profession, Job,Order, DaysNeeded).



% Gets the max amount of time taken in one day 
timesOne(X) :- #max{R : usableSchedule(Profession, Job, 1, R, People)} = X.
timesTwo(X) :- #max{R : usableSchedule(Profession, Job, 2, R, People)} = X.
timesThree(X) :- #max{R : usableSchedule(Profession, Job, 3, R, People)} = X.
timesFour(X) :- #max{R : usableSchedule(Profession, Job, 4, R, People)} = X.
timesFive(X) :- #max{R : usableSchedule(Profession, Job, 5, R, People)} = X.
timesSix(X) :- #max{R : usableSchedule(Profession, Job, 6, R, People)} = X.
totalTime(TotalTime) :- timesOne(X1), timesTwo(X2), timesThree(X3), timesFour(X4), timesFive(X5), timesSix(X6), TotalTime=X1+X2+X3+X4+X5+X6. 


% Sums the amount of workers
totalWorkers(X) :- #sum{Workers : usableSchedule(Profession, Job, Order, _, Workers)} = X.

% Prioritizes shortest time possible, then the minimum amount of workers.
:~ totalWorkers(Workers). [Workers@1]
:~ totalTime(TotalTime). [TotalTime@2]

% laborCost(X) :- #sum{WorkerPays : usableSchedule(Profession, Job, Order, Days, People), workerRate(Profession, Pay), WorkerPays = Pay*Days*People}.
% :- usableSchedule(Profession, Job, Order, Days, People), usableDays(Profession, Job, Order, DaysNeeded), DaysNeeded!= Days*People.

% :- usableSchedule(Profession, Order, Days, People), usableDays(Profession, Order, DaysNeeded), DaysNeeded >Days*People.
% :- usableSchedule(Profession, Job, Order, FDays, FPeople), usableSchedule(Profession, Job, Order, SDays, SPeople), FDays!=SDays, FDays!=SPeople. 
% #show profession/1.
% #show construction_order/2.
% #show profession_time/3.
% #show usableDays/4.
#show laborCost/1.
#show totalWorkers/1.
#show totalTime/1.

#show usableSchedule/5.